# 과제 문제

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/43f4c680-a7ab-4f2d-b233-d37ec40472ce/7cb3ffd1-c4b8-4167-bed2-1a95d556439b/image.png)

# multiplication code

```jsx
#include "ros/ros.h"
#include "std_msgs/Int32.h"

int main(int argc, char **argv)
{
  ros::init(argc, argv, "multiplication_publisher");
  ros::NodeHandle n;

  ros::Publisher multiplication_pub = n.advertise<std_msgs::Int32>("multiplication_result", 1000);
  ros::Rate loop_rate(1); // Publish every 1 second

  int multiplier = 1; // Set the multiplier for the table
  int number = 1;     // Start from 1

  while (ros::ok())
  {
    std_msgs::Int32 msg;
    msg.data = multiplier * number;

    ROS_INFO("Publishing: %d x %d = %d", multiplier, number, msg.data);
    multiplication_pub.publish(msg);

    number++;
    if (number > 9)
    {
      number = 1; // Reset to 1 after 9
      multiplier++;
    }

    ros::spinOnce();
    loop_rate.sleep();
  }

  return 0;
}

```

# result code

```jsx
**#include "ros/ros.h"
#include "std_msgs/Int32.h"

void multiplicationCallback(const std_msgs::Int32::ConstPtr& msg)
{
  ROS_INFO("Received result: %d", msg->data);
}

int main(int argc, char **argv)
{
  ros::init(argc, argv, "multiplication_subscriber");
  ros::NodeHandle n;

  ros::Subscriber sub = n.subscribe("multiplication_result", 1000, multiplicationCallback);

  ros::spin();

  return 0;
}**

```

# CMakeLists code

```jsx
cmake_minimum_required(VERSION 3.0.2)
project(my_first_pkg)

find_package(catkin REQUIRED COMPONENTS
  roscpp
  rospy
  std_msgs
)

catkin_package(
  INCLUDE_DIRS include
  LIBRARIES my_first_pkg
  CATKIN_DEPENDS roscpp rospy std_msgs
  DEPENDS system_lib
)

###########
## Build ##
###########

include_directories(
  ${catkin_INCLUDE_DIRS}
)

add_executable(multiplication_node src/multiplication.cpp)
add_dependencies(multiplication_node ${multiplication_node_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
target_link_libraries(multiplication_node  ${catkin_LIBRARIES} )

add_executable(result_node src/result.cpp)
add_dependencies(result_node ${result_node_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
target_link_libraries(result_node  ${catkin_LIBRARIES} )

## Rename C++ executable without prefix
## The above recommended prefix causes long target names, the following renames the
## target back to the shorter version for ease of user use
## e.g. "rosrun someones_pkg node" instead of "rosrun someones_pkg someones_pkg_node"
# set_target_properties(${PROJECT_NAME}_node PROPERTIES OUTPUT_NAME node PREFIX "")

## Add cmake target dependencies of the executable
## same as for the library above
# add_dependencies(${PROJECT_NAME}_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Specify libraries to link a library or executable target against
# target_link_libraries(${PROJECT_NAME}_node
#   ${catkin_LIBRARIES}
# )

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# catkin_install_python(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables for installation
## See http://docs.ros.org/melodic/api/catkin/html/howto/format1/building_executables.html
# install(TARGETS ${PROJECT_NAME}_node
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark libraries for installation
## See http://docs.ros.org/melodic/api/catkin/html/howto/format1/building_libraries.html
# install(TARGETS ${PROJECT_NAME}
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_GLOBAL_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_my_first_pkg.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)

```

# 실행 결과

![2025-01-03-130227_1024x768_scrot.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/43f4c680-a7ab-4f2d-b233-d37ec40472ce/0d59ecb5-432a-4461-9279-24afcf45580c/673591ef-2955-498b-a18d-9fc52f94eefe.png)

![2025-01-03-125231_1024x768_scrot.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/43f4c680-a7ab-4f2d-b233-d37ec40472ce/0991f8c8-9708-4689-8609-775711697eb0/152aa186-8db5-4b89-b70f-e519b4b60b5a.png)

![2025-01-03-130214_1024x768_scrot.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/43f4c680-a7ab-4f2d-b233-d37ec40472ce/c9843b3d-f63a-4938-8d1e-013be04a17d7/df4140e1-55c8-417c-950c-b77168d8641e.png)

![2025-01-03-130212_1024x768_scrot.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/43f4c680-a7ab-4f2d-b233-d37ec40472ce/e8a1aaf8-9365-4b73-90f5-8b5610e459c0/7874d550-7772-4032-b77c-1d350aaa17bb.png)
